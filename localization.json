{
  "en": {
    "potatoes": "Potatoes",
    "roleOne": "Chip Shop Prepper",
    "roleTwo": "Smart Prepper",
    "roleThree": "Chip Shop Manager",
    "roleFour": "Chip Shop Owner",
    "roleFive": "Chip Empire Executive",
    "roleSix": "Rich Lazy Director",
    "roleSeven": "President of Potatoes",
    "shift": "Shift:",
    "startShift": "Start Shift",
    "served": "Served:",
    "potato": "Potato:",
    "money": "Money:",
    "newGamePrompt": "Click again to start a New Game...",
    "floatStockMarket": "Float on Stock Market<br>${formatToCashNotation(getPriceToFloatOnStockMarket())}",
    "autoShiftUpgradeDisabled": "Auto Shift Start Upgrade<br>DISABLED",
    "autoShiftUpgradeEnabled": "Auto Shift Start Upgrade<br>ENABLED",
    "congratulations": "Congratulations, You Won!",
    "endOfShift": "End Of Shift ${getShiftCounter()}",
    "potatoesNextShift": "Potatoes for next shift: ${(getActualPotatoesInStorage() + Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity())) - getActualPotatoesInStorage()} to be delivered = ${Math.abs(getActualPotatoesInStorage() - Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity()))}",
    "maxStorageReached": " (due to max storage reached)",
    "promotionMessage": "You were Promoted to ${getElements().playerRoleText.innerText}!<br><br>",
    "investmentReturns": "Your investments of ${formatToCashNotation(getAmountInvestmentCash())} returned ${formatToCashNotation(getCurrentValueOfInvestment())} at a risk level of ${getAmountInvestmentRisk()}%",
    "investmentGrowth": "A growth of ${formatToCashNotation(getGrowthInvestment())} this period",
    "investmentLoss": "A loss of ${formatToCashNotation(Math.abs(getGrowthInvestment()))} this period",
    "totalInvestmentGrowth": "A total growth of ${formatToCashNotation(getCurrentValueOfInvestment() - getAmountInvestmentCash())}",
    "totalInvestmentLoss": "A total loss of ${formatToCashNotation(Math.abs(getCurrentValueOfInvestment() - getAmountInvestmentCash()))}",
    "clickAgainNewGame": "Click again to start a New Game...",
    "currentCash": "Current Cash: ${currentCash()}",
    "cashInvested": "Cash Invested:",
    "currentRisk": "Current Risk:",
    "currentValue": "Current Value:",
    "gainLoss": "Gain / Loss:",
    "withdrawAll": "Withdraw All:",
    "withdrawNow": "Withdraw Now!",
    "cannotWithdraw": "Cannot Withdraw",
    "gainedAShiftPoint": "You gained a shift point!",
    "shiftPoints": "Your total shift points are ${getShiftPoints()}",
    "shiftPointsPartial": "Your total shift points are ",
    "noShiftPoints": "No Shift Points!",
    "spinWheel": "Spin the Wheel",
    "startedFinalShift": "Started Final Shift!",
    "beatTheGame": "You have beat the game! Well Done!",
    "youEarnedATotalOf": "You earned a total of ${formatToCashNotation(getTotalEarnedInSales())} in chip sales!",
    "youSpentATotalOf": "You spent a total of ${formatToCashNotation(getTotalSpentExcludingInvestments())} excluding investments!",
    "youPeeledATotalOf": "You peeled a total of ${getTotalPeeled()} potatoes.",
    "youCutATotalOf": "You cut a total of ${getTotalCut()} chips.",
    "youWastedATotalOf": "You wasted a total of ${getTotalWastedChips()} chips.",
    "youServedATotalOf": "You served a total of ${getTotalServedCustomers()} customers!",
    "nowDoTheHonours": "Now please do the honours and fry up and serve the last customer their chips before you retire as a millionaire!",
    "earnings": "Earnings: ${formatToCashNotation(getCurrentCash() - getOldCash())} this shift + ${formatToCashNotation(getOldCash())} in bank = ${formatToCashNotation(getCurrentCash())}",
    "customersServed": "Customers Served: ${getCustomersServed()}<br>",
    "potatoesPeeled": "Potatoes Peeled: ${getPotatoesPeeledThisShift()}",
    "chipsCut": "Chips Cut: ${getChipsCutThisShift()}",
    "chipsFried": "Chips Fried: ${getChipsFriedThisShift()}",
    "chipsWastedThisShift": "Chips Wasted This Shift: ${getChipsWastedThisShift()}",
    "customerWalkouts": "Customer Walkouts: ${getCustomersWaitingBeforeEndOfShift() - getCustomersWaiting()}",
    "customersStillWaiting": "Customers Still Waiting: ${getCustomersWaiting()}",
    "cappedAutoPeeler": "Capped: ${getCapAutoPeeler()}/s",
    "cappedAutoChipper": "Capped: ${getCapAutoChipper()}/s",
    "cappedAutoFryer": "Capped: ${getCapAutoFryer()}s<br> Ready in ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "cappedAutoStorageCollector": "Capped: ${getCapAutoStorageCollector()}s<br> Ready in ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "cappedAutoCustomerServer": "Capped: ${getCapAutoCustomerServer()}s<br> Ready in ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "cappedPotatoCapacity": "Capped: ${getCapPotatoCapacity()}",
    "cappedFryerCapacity": "Capped: ${getCapFryerCapacity()}",
    "cappedFryerSpeed": "Capped: ${getCapFryerSpeed()}s",
    "cappedMaxDelivery": "Capped: ${getCapMaxDelivery()}",
    "cappedMaxWaitCustomer": "Capped: ${getCapMaxWaitCustomer()}s",
    "peelPotato": "Peel Potato",
    "cutChips": "Cut Chips",
    "fryChips": "Fry Chips<br> (Capacity: ${getFryerCapacity()})",
    "servingStorage": "Serving Storage",
    "serveCustomer": "Serve Customer",
    "autoPeelerUpgradeButton": "Auto Peeler (${getCurrentSpeedAutoPeeler()})<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(getPriceToImproveAutoPeeler())}<br>Buy To Activate",
    "autoPeelerUpgradeButtonSomeBought": "Auto Peeler (${getCurrentSpeedAutoPeeler()}/s)<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoPeelerUpgradeButton.id))}",
    "autoChipperUpgradeButton": "Auto Chipper (${getCurrentSpeedAutoChipper()})<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(getPriceToImproveAutoChipper())}<br>Buy To Activate",
    "autoChipperUpgradeButtonSomeBought": "Auto Chipper (${getCurrentSpeedAutoChipper()}/s)<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoChipperUpgradeButton.id))}",
    "autoFryerUpgradeButton": "Auto Fryer (${getCurrentSpeedAutoFryer()})<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(getPriceToImproveAutoFryerWhenFryerEmptyAndChipsCut())}<br>Buy To Activate",
    "autoFryerUpgradeButtonSomeBought": "Auto Fryer (${getCurrentSpeedAutoFryer()}/s)<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoFryerUpgradeButton.id))}<br> Ready in ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "autoStorageCollectorUpgradeButton": "Auto Collect (${getCurrentSpeedAutoStorageCollector()})<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(getPriceToImproveAutoMoverFromFryerToStorage())}<br>Buy To Activate",
    "autoStorageCollectorUpgradeButtonSomeBought": "Auto Collect (${getCurrentSpeedAutoStorageCollector()}/s)<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoStorageCollectorUpgradeButton.id))}<br> Ready in ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "autoCustomerServerUpgradeButton": "Auto Server (${getCurrentSpeedAutoCustomerServer()})<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(getPriceToImproveAutoCustomerServer())}<br>Buy To Activate",
    "autoCustomerServerUpgradeButtonSomeBought": "Auto Server (${getCurrentSpeedAutoCustomerServer()}/s)<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoCustomerServerUpgradeButton.id))}<br> Ready in ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "improvePotatoStorageButton": "Increase Potato Cap.<br>${getPotatoStorageQuantity()} → ${getPotatoStorageQuantity() + getUpgradePotatoStorageQuantity()}<br>${formatToCashNotation(getPriceToImprovePotatoStorage())}",
    "improveFryerCapacityButton": "Improve Fryer Cap.<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(getPriceToImproveFryerCapacity())}",
    "improveFryerCapacityButtonSomeBought": "Improve Fryer Cap.<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().improveFryerCapacityButton.id))}",
    "fastFryerUpgradeButton": "Improve Fry Speed<br>${getFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(getPriceToImproveFryTimer())}",
    "fastFryerUpgradeButtonSomeBought": "Improve Fry Speed<br>${getCurrentSpeedFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().fastFryerUpgradeButton.id))}",
    "potatoDeliveryDoublerButton": "Double Max Delivery<br>${getMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(getPriceToDoubleSpudsMax())}",
    "potatoDeliveryDoublerButtonSomeBought": "Double Max Delivery<br>${getCurrentMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().potatoDeliveryDoublerButton.id))}",
    "customerFrequencyIncreaser": "Max Wait Customer<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(getPriceToIncreaseFootfall())}",
    "customerFrequencyIncreaserSomeBought": "Max Wait Customer<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().customerFrequencyIncreaser.id))}",
    "twoHandedPeelingButton": "Double Peeling Tool <br> ${formatToCashNotation(getPriceToEnableDoublePeeling())}",
    "twoHandedChippingButton": "Double Chipping Tool <br> ${formatToCashNotation(getPriceToEnableDoubleChipping())}",
    "investmentFundUnlockOrFloatButton": "Buy Investment Fund <br> ${formatToCashNotation(getPriceToUnlockInvestmentFundOrFloatOnStockMarket())}",
    "addStorageHeaterAutoShiftStartButton": "Buy Storage Heater <br> ${formatToCashNotation(getPriceToAddStorageHeater())}",
    "startShiftButton": "Start Shift",
    "doublePeelingToolPurchase": "Double Peeling Tool PURCHASED",
    "doubleChippingToolPurchase": "Double Chipping Tool PURCHASED",
    "storageBinHeaterPurchase": "Storage Bin Heater PURCHASED",
    "autoShiftStartUpgrade": "Auto Shift Start Upgrade<br>${formatToCashNotation(getPriceToUnlockAutoShiftStart())})",
    "emptyFryerToUseAgain": "Empty Fryer<br>To Use Again!",
    "finalShift": "Final Shift!",
    "serveLastCustomerAndWin": "Serve Last Customer and Win Game!",
    "potatoStorageFilled": "Potato Storage Filled",
    "moneyDoubled": "Money Doubled",
    "customerWalkout": "Customer Walkout",
    "customers": "Customers",
    "deliveryCancelled": "Delivery Cancelled",
    "fineOfHalfMoney": "Fine of Half Money",
    "halfOfPotatoesRot": "Half of Potatoes Rot",
    "fryingChips": "Frying ' + getQuantityOfChipsFrying() + ' Chips <br> (' + getFryTimeRemaining() + 's)",
    "newGame": "New Game",
    "clickAgainToStartNewGame": "Click again to start a New Game...",
    "loadGame": "Load Game",
    "saveGame": "Save Game",
    "help": "Help",
    "resumeGame": "Resume Game",
    "autoSaveOnOff": "AutoSave On/Off",
    "shiftEnded": "Your shift has ended!",
    "continue": "Continue",
    "changeInvestmentAmount": "Change <br>Investment <br>Amount",
    "changeRiskAmount": "Change <br>Investment <br>Amount",
    "incrementRisk": "+1% Risk",
    "decrementRisk": "-1% Risk"
  },
  "es": {
    "potatoes": "Papas",
    "roleOne": "Preparador de Fritas",
    "roleTwo": "Preparador Inteligente",
    "roleThree": "Gerente de Fritas",
    "roleFour": "Propietario de Fritas",
    "roleFive": "Ejecutivo del Imperio de Fritas",
    "roleSix": "Director Rico y Perezoso",
    "roleSeven": "Presidente de Papas",
    "shift": "Turno:",
    "startShift": "Comenzar turno",
    "served": "Servido:",
    "potato": "Papa:",
    "money": "Dinero:",
    "newGamePrompt": "Haga clic nuevamente para iniciar un nuevo juego...",
    "floatStockMarket": "Flotar en el mercado de valores<br>${formatToCashNotation(getPriceToFloatOnStockMarket())}",
    "autoShiftUpgradeDisabled": "Inicio de turno auto<br>DESHABILITADA",
    "autoShiftUpgradeEnabled": "Inicio de turno auto<br>HABILITADA",
    "congratulations": "¡Felicidades, has ganado!",
    "endOfShift": "Fin del turno ${getShiftCounter()}",
    "potatoesNextShift": "Papas para el próximo turno: ${(getActualPotatoesInStorage() + Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity())) - getActualPotatoesInStorage()} para entregar = ${Math.abs(getActualPotatoesInStorage() - Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity()))}",
    "maxStorageReached": " (debido a que se alcanzó el almacenamiento máximo)",
    "promotionMessage": "¡Has sido promovido a ${getElements().playerRoleText.innerText}!<br><br>",
    "investmentReturns": "Tus inversiones de ${formatToCashNotation(getAmountInvestmentCash())} devolvieron ${formatToCashNotation(getCurrentValueOfInvestment())} con un nivel de riesgo de ${getAmountInvestmentRisk()}%",
    "investmentGrowth": "Un crecimiento de ${formatToCashNotation(getGrowthInvestment())} en este período",
    "investmentLoss": "Una pérdida de ${formatToCashNotation(Math.abs(getGrowthInvestment()))} en este período",
    "totalInvestmentGrowth": "Un crecimiento total de ${formatToCashNotation(getCurrentValueOfInvestment() - getAmountInvestmentCash())}",
    "totalInvestmentLoss": "Una pérdida total de ${formatToCashNotation(Math.abs(getCurrentValueOfInvestment() - getAmountInvestmentCash()))}",
    "clickAgainNewGame": "Haga clic nuevamente para iniciar un nuevo juego...",
    "currentCash": "Dinero actual: ${currentCash()}",
    "cashInvested": "Dinero invertido:",
    "currentRisk": "Riesgo actual:",
    "currentValue": "Valor actual:",
    "gainLoss": "Ganancia / Pérdida:",
    "withdrawAll": "Retirar todo:",
    "withdrawNow": "Retirar Ahora!",
    "cannotWithdraw": "No se Puede Retirar",
    "gainedAShiftPoint": "¡Ganaste un punto de turno!",
    "shiftPoints": "Puntos de turno: ${getShiftPoints()}",
    "shiftPointsPartial": "Puntos de turno: ",
    "noShiftPoints": "¡Puntos acabado!",
    "spinWheel": "Gira la rueda",
    "startedFinalShift": "¡Comenzó el turno final!",
    "beatTheGame": "¡Has completado el juego! ¡Bien hecho!",
    "youEarnedATotalOf": "¡Has ganado un total de ${formatToCashNotation(getTotalEarnedInSales())} en ventas de patatas fritas!",
    "youSpentATotalOf": "¡Has gastado un total de ${formatToCashNotation(getTotalSpentExcludingInvestments())} excluyendo inversiones!",
    "youPeeledATotalOf": "¡Has pelado un total de ${getTotalPeeled()} papas!",
    "youCutATotalOf": "¡Has cortado un total de ${getTotalCut()} chips!",
    "youWastedATotalOf": "¡Has desperdiciado un total de ${getTotalWastedChips()} chips!",
    "youServedATotalOf": "¡Has servido un total de ${getTotalServedCustomers()} clientes!",
    "nowDoTheHonours": "¡Ahora, por favor, haz el honor de freír y servir al último cliente sus chips antes de retirarte como millonario!",
    "earnings": "Ganancias: ${formatToCashNotation(getCurrentCash() - getOldCash())} este turno + ${formatToCashNotation(getOldCash())} en el banco = ${formatToCashNotation(getCurrentCash())}",
    "customersServed": "Clientes Atendidos: ${getCustomersServed()}<br>",
    "potatoesPeeled": "Papas Peladas: ${getPotatoesPeeledThisShift()}",
    "chipsCut": "Papas Cortadas: ${getChipsCutThisShift()}",
    "chipsFried": "Papas Fritas: ${getChipsFriedThisShift()}",
    "chipsWastedThisShift": "Papas Desperdiciadas Este Turno: ${getChipsWastedThisShift()}",
    "customerWalkouts": "Clientes Que Se Fueron: ${getCustomersWaitingBeforeEndOfShift() - getCustomersWaiting()}",
    "customersStillWaiting": "Clientes Aún Esperando: ${getCustomersWaiting()}",
    "cappedAutoPeeler": "Máximo: ${getCapAutoPeeler()}/s",
    "cappedAutoChipper": "Máximo: ${getCapAutoChipper()}/s",
    "cappedAutoFryer": "Máximo: ${getCapAutoFryer()}s<br> Listo en ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "cappedAutoStorageCollector": "Máximo: ${getCapAutoStorageCollector()}s<br> Listo en ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "cappedAutoCustomerServer": "Máximo: ${getCapAutoCustomerServer()}s<br> Listo en ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "cappedPotatoCapacity": "Máximo: ${getCapPotatoCapacity()}",
    "cappedFryerCapacity": "Máximo: ${getCapFryerCapacity()}",
    "cappedFryerSpeed": "Máximo: ${getCapFryerSpeed()}s",
    "cappedMaxDelivery": "Máximo: ${getCapMaxDelivery()}",
    "cappedMaxWaitCustomer": "Máximo: ${getCapMaxWaitCustomer()}s",
    "peelPotato": "Pelar Papa",
    "cutChips": "Cortar Papas Fritas",
    "fryChips": "Freír Papas Fritas<br> (Capacidad: ${getFryerCapacity()})",
    "servingStorage": "Almacenamiento de Servicio",
    "serveCustomer": "Atender al Cliente",
    "autoPeelerUpgradeButton": "Pelador Auto (${getCurrentSpeedAutoPeeler()})<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(getPriceToImproveAutoPeeler())}<br>Comprar para Activar",
    "autoPeelerUpgradeButtonSomeBought": "Pelador Auto (${getCurrentSpeedAutoPeeler()}/s)<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoPeelerUpgradeButton.id))}",
    "autoChipperUpgradeButton": "Picador Auto (${getCurrentSpeedAutoChipper()})<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(getPriceToImproveAutoChipper())}<br>Comprar para Activar",
    "autoChipperUpgradeButtonSomeBought": "Picador Auto (${getCurrentSpeedAutoChipper()}/s)<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoChipperUpgradeButton.id))}",
    "autoFryerUpgradeButton": "Freidora Automática (${getCurrentSpeedAutoFryer()})<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(getPriceToImproveAutoFryerWhenFryerEmptyAndChipsCut())}<br>Comprar para Activar",
    "autoFryerUpgradeButtonSomeBought": "Freidora Automática (${getCurrentSpeedAutoFryer()}/s)<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoFryerUpgradeButton.id))}<br> Listo en ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "autoStorageCollectorUpgradeButton": "Colector Auto (${getCurrentSpeedAutoStorageCollector()})<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(getPriceToImproveAutoMoverFromFryerToStorage())}<br>Comprar para Activar",
    "autoStorageCollectorUpgradeButtonSomeBought": "Colector Auto (${getCurrentSpeedAutoStorageCollector()}/s)<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoStorageCollectorUpgradeButton.id))}<br> Listo en ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "autoCustomerServerUpgradeButton": "Servidor Auto (${getCurrentSpeedAutoCustomerServer()})<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(getPriceToImproveAutoCustomerServer())}<br>Comprar para Activar",
    "autoCustomerServerUpgradeButtonSomeBought": "Servidor Auto (${getCurrentSpeedAutoCustomerServer()}/s)<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoCustomerServerUpgradeButton.id))}<br> Listo en ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "improvePotatoStorageButton": "Aumentar Cap. de Papas<br>${getPotatoStorageQuantity()} → ${getPotatoStorageQuantity() + getUpgradePotatoStorageQuantity()}<br>${formatToCashNotation(getPriceToImprovePotatoStorage())}",
    "improveFryerCapacityButton": "Mejorar Cap. de Freidora<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(getPriceToImproveFryerCapacity())}",
    "improveFryerCapacityButtonSomeBought": "Mejorar Cap. de Freidora<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().improveFryerCapacityButton.id))}",
    "fastFryerUpgradeButton": "Mejorar Velocidad de Freidora<br>${getFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(getPriceToImproveFryTimer())}",
    "fastFryerUpgradeButtonSomeBought": "Mejorar Velocidad de Freidora<br>${getCurrentSpeedFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().fastFryerUpgradeButton.id))}",
    "potatoDeliveryDoublerButton": "Duplicar Entrega Máxima<br>${getMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(getPriceToDoubleSpudsMax())}",
    "potatoDeliveryDoublerButtonSomeBought": "Duplicar Entrega Máxima<br>${getCurrentMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().potatoDeliveryDoublerButton.id))}",
    "customerFrequencyIncreaser": "Tiempo Máximo de Espera de Clientes<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(getPriceToIncreaseFootfall())}",
    "customerFrequencyIncreaserSomeBought": "Tiempo Máximo de Espera de Clientes<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().customerFrequencyIncreaser.id))}",
    "twoHandedPeelingButton": "Herramienta de Pelado Doble<br> ${formatToCashNotation(getPriceToEnableDoublePeeling())}",
    "twoHandedChippingButton": "Herramienta de Corte Doble<br> ${formatToCashNotation(getPriceToEnableDoubleChipping())}",
    "investmentFundUnlockOrFloatButton": "Comprar Fondo de Inversión<br> ${formatToCashNotation(getPriceToUnlockInvestmentFundOrFloatOnStockMarket())}",
    "addStorageHeaterAutoShiftStartButton": "Comprar Calentador de Almacenamiento<br> ${formatToCashNotation(getPriceToAddStorageHeater())}",
    "startShiftButton": "Comenzar Turno",
    "doublePeelingToolPurchase": "Herramienta de Pelado Doble COMPRADA",
    "doubleChippingToolPurchase": "Herramienta de Corte Doble COMPRADA",
    "storageBinHeaterPurchase": "Calentador de Almacenamiento COMPRADA",
    "autoShiftStartUpgrade": "Inicio de Turno Auto.<br>${formatToCashNotation(getPriceToUnlockAutoShiftStart())})",
    "emptyFryerToUseAgain": "Sacar Fritas<br>Para Usar de Nuevo!",
    "finalShift": "¡Último Turno!",
    "serveLastCustomerAndWin": "¡Atender al Último Cliente y Ganar el Juego!",
    "potatoStorageFilled": "Almacenamiento Lleno",
    "moneyDoubled": "Dinero Duplicado",
    "customerWalkout": "Cliente se Retira",
    "customers": "Clientes",
    "deliveryCancelled": "Entrega Cancelada",
    "fineOfHalfMoney": "Multa de 50% del dinero",
    "halfOfPotatoesRot": "50% Papas Se Pudren",
    "fryingChips": "Friendo ' + getQuantityOfChipsFrying() + ' Papas <br> (' + getFryTimeRemaining() + 's)",
    "newGame": "Nuevo Juego",
    "clickAgainToStartNewGame": "Haz Clic de Nuevo Para Empezar un Nuevo Juego...",
    "loadGame": "Cargar Juego",
    "saveGame": "Guardar Juego",
    "help": "Ayuda",
    "resumeGame": "Reanudar Juego",
    "autoSaveOnOff": "AutoGuardado Activado/Desactivado",
    "shiftEnded": "¡Tu turno ha terminado!",
    "continue": "Continuar",
    "changeInvestmentAmount": "Cambiar <br>Cantidad <br>de Inversión",
    "changeRiskAmount": "Cambiar <br>Cantidad <br>de Riesgo",
    "incrementRisk": "+1% Riesgo",
    "decrementRisk": "-1% Riesgo"
  },
  "de": {
    "potatoes": "Kartoffeln",
    "roleOne": "Vorbereiter in der Chipbude",
    "roleTwo": "Kluger Vorbereiter",
    "roleThree": "Manager der Chipbude",
    "roleFour": "Besitzer der Chipbude",
    "roleFive": "Executive der Chip-Empire",
    "roleSix": "Reicher fauler Direktor",
    "roleSeven": "Präsident der Kartoffeln",
    "shift": "Schicht:",
    "startShift": "Schicht Beginnen",
    "served": "Bedient:",
    "potato": "Kartoffel:",
    "money": "Geld:",
    "newGamePrompt": "Klicken Sie erneut, um ein neues Spiel zu starten...",
    "floatStockMarket": "An die Börse gehen<br>${formatToCashNotation(getPriceToFloatOnStockMarket())}",
    "autoShiftUpgradeDisabled": "Automatisches Schichtstart-Upgrade<br>DEAKTIVIERT",
    "autoShiftUpgradeEnabled": "Automatisches Schichtstart-Upgrade<br>AKTIVIERT",
    "congratulations": "Herzlichen Glückwunsch, Sie haben gewonnen!",
    "endOfShift": "Ende der Schicht ${getShiftCounter()}",
    "potatoesNextShift": "Kartoffeln für die nächste Schicht: ${(getActualPotatoesInStorage() + Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity())) - getActualPotatoesInStorage()} zu liefern = ${Math.abs(getActualPotatoesInStorage() - Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity()))}",
    "maxStorageReached": " (aufgrund maximaler Lagerkapazität erreicht)",
    "promotionMessage": "Sie wurden befördert zum ${getElements().playerRoleText.innerText}!<br><br>",
    "investmentReturns": "Ihre Investitionen von ${formatToCashNotation(getAmountInvestmentCash())} haben ${formatToCashNotation(getCurrentValueOfInvestment())} bei einem Risikolevel von ${getAmountInvestmentRisk()}% zurückgebracht",
    "investmentGrowth": "Ein Wachstum von ${formatToCashNotation(getGrowthInvestment())} in diesem Zeitraum",
    "investmentLoss": "Ein Verlust von ${formatToCashNotation(Math.abs(getGrowthInvestment()))} in diesem Zeitraum",
    "totalInvestmentGrowth": "Ein Gesamtwachstum von ${formatToCashNotation(getCurrentValueOfInvestment() - getAmountInvestmentCash())}",
    "totalInvestmentLoss": "Ein Gesamtverlust von ${formatToCashNotation(Math.abs(getCurrentValueOfInvestment() - getAmountInvestmentCash()))}",
    "clickAgainNewGame": "Klicken Sie erneut, um ein neues Spiel zu starten...",
    "currentCash": "Aktuelles Geld: ${currentCash()}",
    "cashInvested": "Investiertes Geld:",
    "currentRisk": "Aktuelles Risiko:",
    "currentValue": "Aktueller Wert:",
    "gainLoss": "Gewinn / Verlust:",
    "withdrawAll": "Alles abheben:",
    "withdrawNow": "Jetzt abheben!",
    "cannotWithdraw": "Kann nicht abheben",
    "gainedAShiftPoint": "Sie haben einen Schichtpunkt gewonnen!",
    "shiftPoints": "Ihre gesamten Schichtpunkte sind ${getShiftPoints()}",
    "shiftPointsPartial": "Ihre gesamten Schichtpunkte sind ",
    "noShiftPoints": "Keine Schichtpunkte!",
    "spinWheel": "Drehen Sie das Rad",
    "startedFinalShift": "Letzte Schicht gestartet!",
    "beatTheGame": "Sie haben das Spiel geschlagen! Gut gemacht!",
    "youEarnedATotalOf": "Sie haben insgesamt ${formatToCashNotation(getTotalEarnedInSales())} durch Chip-Verkäufe verdient!",
    "youSpentATotalOf": "Sie haben insgesamt ${formatToCashNotation(getTotalSpentExcludingInvestments())} ausgegeben, exklusive Investitionen!",
    "youPeeledATotalOf": "Sie haben insgesamt ${getTotalPeeled()} Kartoffeln geschält.",
    "youCutATotalOf": "Sie haben insgesamt ${getTotalCut()} Chips geschnitten.",
    "youWastedATotalOf": "Sie haben insgesamt ${getTotalWastedChips()} Chips verschwendet.",
    "youServedATotalOf": "Sie haben insgesamt ${getTotalServedCustomers()} Kunden bedient!",
    "nowDoTheHonours": "Bitte braten und servieren Sie nun dem letzten Kunden ihre Chips, bevor Sie als Millionär in Rente gehen!",
    "earnings": "Einnahmen: ${formatToCashNotation(getCurrentCash() - getOldCash())} in dieser Schicht + ${formatToCashNotation(getOldCash())} auf der Bank = ${formatToCashNotation(getCurrentCash())}",
    "customersServed": "Kunden bedient: ${getCustomersServed()}<br>",
    "potatoesPeeled": "Kartoffeln geschält: ${getPotatoesPeeledThisShift()}",
    "chipsCut": "Chips geschnitten: ${getChipsCutThisShift()}",
    "chipsFried": "Chips gebraten: ${getChipsFriedThisShift()}",
    "chipsWastedThisShift": "Diese Schicht verschwendete Chips: ${getChipsWastedThisShift()}",
    "customerWalkouts": "Kunden, die das Warten abbrachen: ${getCustomersWaitingBeforeEndOfShift() - getCustomersWaiting()}",
    "customersStillWaiting": "Kunden warten noch: ${getCustomersWaiting()}",
    "cappedAutoPeeler": "Gedeckelt: ${getCapAutoPeeler()}/s",
    "cappedAutoChipper": "Gedeckelt: ${getCapAutoChipper()}/s",
    "cappedAutoFryer": "Gedeckelt: ${getCapAutoFryer()}s<br> Bereit in ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "cappedAutoStorageCollector": "Gedeckelt: ${getCapAutoStorageCollector()}s<br> Bereit in ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "cappedAutoCustomerServer": "Gedeckelt: ${getCapAutoCustomerServer()}s<br> Bereit in ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "cappedPotatoCapacity": "Gedeckelt: ${getCapPotatoCapacity()}",
    "cappedFryerCapacity": "Gedeckelt: ${getCapFryerCapacity()}",
    "cappedFryerSpeed": "Gedeckelt: ${getCapFryerSpeed()}s",
    "cappedMaxDelivery": "Gedeckelt: ${getCapMaxDelivery()}",
    "cappedMaxWaitCustomer": "Gedeckelt: ${getCapMaxWaitCustomer()}s",
    "peelPotato": "Kartoffel schälen",
    "cutChips": "Chips schneiden",
    "fryChips": "Chips braten<br> (Kapazität: ${getFryerCapacity()})",
    "servingStorage": "Bedienung Lager",
    "serveCustomer": "Kunden bedienen",
    "autoPeelerUpgradeButton": "Automatischer Schäler (${getCurrentSpeedAutoPeeler()})<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(getPriceToImproveAutoPeeler())}<br>Kaufen zum Aktivieren",
    "autoPeelerUpgradeButtonSomeBought": "Automatischer Schäler (${getCurrentSpeedAutoPeeler()}/s)<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoPeelerUpgradeButton.id))}",
    "autoChipperUpgradeButton": "Automatischer Schredder (${getCurrentSpeedAutoChipper()})<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(getPriceToImproveAutoChipper())}<br>Kaufen zum Aktivieren",
    "autoChipperUpgradeButtonSomeBought": "Automatischer Schredder (${getCurrentSpeedAutoChipper()}/s)<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoChipperUpgradeButton.id))}",
    "autoFryerUpgradeButton": "Automatischer Fritteusenbetreiber (${getCurrentSpeedAutoFryer()})<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(getPriceToImproveAutoFryerWhenFryerEmptyAndChipsCut())}<br>Kaufen zum Aktivieren",
    "autoFryerUpgradeButtonSomeBought": "Automatischer Fritteusenbetreiber (${getCurrentSpeedAutoFryer()}/s)<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoFryerUpgradeButton.id))}<br> Bereit in ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "autoStorageCollectorUpgradeButton": "Automatischer Sammler (${getCurrentSpeedAutoStorageCollector()})<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(getPriceToImproveAutoMoverFromFryerToStorage())}<br>Kaufen zum Aktivieren",
    "autoStorageCollectorUpgradeButtonSomeBought": "Automatischer Sammler (${getCurrentSpeedAutoStorageCollector()}/s)<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoStorageCollectorUpgradeButton.id))}<br> Bereit in ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "autoCustomerServerUpgradeButton": "Automatischer Bediener (${getCurrentSpeedAutoCustomerServer()})<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(getPriceToImproveAutoCustomerServer())}<br>Kaufen zum Aktivieren",
    "autoCustomerServerUpgradeButtonSomeBought": "Automatischer Bediener (${getCurrentSpeedAutoCustomerServer()}/s)<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoCustomerServerUpgradeButton.id))}<br> Bereit in ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "improvePotatoStorageButton": "Erhöhe Kartoffelkapazität<br>${getPotatoStorageQuantity()} → ${getPotatoStorageQuantity() + getUpgradePotatoStorageQuantity()}<br>${formatToCashNotation(getPriceToImprovePotatoStorage())}",
    "improveFryerCapacityButton": "Erhöhe Fritteusenkapazität<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(getPriceToImproveFryerCapacity())}",
    "improveFryerCapacityButtonSomeBought": "Erhöhe Fritteusenkapazität<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().improveFryerCapacityButton.id))}",
    "fastFryerUpgradeButton": "Verbessere Bratgeschwindigkeit<br>${getFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(getPriceToImproveFryTimer())}",
    "fastFryerUpgradeButtonSomeBought": "Verbessere Bratgeschwindigkeit<br>${getCurrentSpeedFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().fastFryerUpgradeButton.id))}",
    "potatoDeliveryDoublerButton": "Verdopple Maximalauslieferung<br>${getMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(getPriceToDoubleSpudsMax())}",
    "potatoDeliveryDoublerButtonSomeBought": "Verdopple Maximalauslieferung<br>${getCurrentMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().potatoDeliveryDoublerButton.id))}",
    "customerFrequencyIncreaser": "Maximale Wartezeit des Kunden<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(getPriceToIncreaseFootfall())}",
    "customerFrequencyIncreaserSomeBought": "Maximale Wartezeit des Kunden<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().customerFrequencyIncreaser.id))}",
    "twoHandedPeelingButton": "Doppeltes Schälwerkzeug <br> ${formatToCashNotation(getPriceToEnableDoublePeeling())}",
    "twoHandedChippingButton": "Doppeltes Schneidwerkzeug <br> ${formatToCashNotation(getPriceToEnableDoubleChipping())}",
    "investmentFundUnlockOrFloatButton": "Investmentfonds kaufen <br> ${formatToCashNotation(getPriceToUnlockInvestmentFundOrFloatOnStockMarket())}",
    "addStorageHeaterAutoShiftStartButton": "Heizung hinzufügen <br> ${formatToCashNotation(getPriceToAddStorageHeater())}",
    "startShiftButton": "Schicht beginnen",
    "doublePeelingToolPurchase": "Doppeltes Schälwerkzeug GEKAUFT",
    "doubleChippingToolPurchase": "Doppeltes Schneidwerkzeug GEKAUFT",
    "storageBinHeaterPurchase": "Heizung für Lagerbehälter GEKAUFT",
    "autoShiftStartUpgrade": "Automatisches Schichtbeginn-Upgrade<br>${formatToCashNotation(getPriceToUnlockAutoShiftStart())})",
    "emptyFryerToUseAgain": "Leere die Fritteuse<br> um sie erneut zu benutzen!",
    "finalShift": "Letzte Schicht!",
    "serveLastCustomerAndWin": "Bedienen Sie den letzten Kunden und gewinnen Sie das Spiel!",
    "potatoStorageFilled": "Kartoffellager gefüllt",
    "moneyDoubled": "Geld verdoppelt",
    "customerWalkout": "Kundenausfall",
    "customers": "Kunden",
    "deliveryCancelled": "Lieferung storniert",
    "fineOfHalfMoney": "Strafe von der Hälfte des Geldes",
    "halfOfPotatoesRot": "Die Hälfte der Kartoffeln verfault",
    "fryingChips": "Brate ' + getQuantityOfChipsFrying() + ' Chips <br> (' + getFryTimeRemaining() + 's)",
    "newGame": "Neues Spiel",
    "clickAgainToStartNewGame": "Klicken Sie erneut, um ein neues Spiel zu starten...",
    "loadGame": "Spiel laden",
    "saveGame": "Spiel speichern",
    "help": "Hilfe",
    "resumeGame": "Spiel fortsetzen",
    "autoSaveOnOff": "AutoSpeichern An/Aus",
    "shiftEnded": "Deine Schicht ist zu Ende!",
    "continue": "Weiter",
    "changeInvestmentAmount": "Ändern <br>Investitions-<br>Betrag",
    "changeRiskAmount": "Ändern <br>Risikobetrag",
    "incrementRisk": "+1% Risiko",
    "decrementRisk": "-1% Risiko"
  },
  "it": {
    "potatoes": "Patate",
    "roleOne": "Preparatore di chip da asporto",
    "roleTwo": "Preparatore intelligente",
    "roleThree": "Responsabile del chip shop",
    "roleFour": "Proprietario del chip shop",
    "roleFive": "Esecutivo dell'Impero dei Chip",
    "roleSix": "Direttore ricco e pigro",
    "roleSeven": "Presidente delle Patate",
    "shift": "Turno:",
    "startShift": "Inizia turno",
    "served": "Serviti:",
    "potato": "Patata:",
    "money": "Denaro:",
    "newGamePrompt": "Clicca di nuovo per iniziare un nuovo gioco...",
    "floatStockMarket": "Quotazione in Borsa<br>${formatToCashNotation(getPriceToFloatOnStockMarket())}",
    "autoShiftUpgradeDisabled": "Aggiornamento avvio turno automatico<br>DISABILITATO",
    "autoShiftUpgradeEnabled": "Aggiornamento avvio turno automatico<br>ABILITATO",
    "congratulations": "Congratulazioni, hai vinto!",
    "endOfShift": "Fine turno ${getShiftCounter()}",
    "potatoesNextShift": "Patate per il prossimo turno: ${(getActualPotatoesInStorage() + Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity())) - getActualPotatoesInStorage()} da consegnare = ${Math.abs(getActualPotatoesInStorage() - Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity()))}",
    "maxStorageReached": " (a causa del raggiungimento della capacità massima)",
    "promotionMessage": "Sei stato promosso a ${getElements().playerRoleText.innerText}!<br><br>",
    "investmentReturns": "I tuoi investimenti di ${formatToCashNotation(getAmountInvestmentCash())} hanno generato un ritorno di ${formatToCashNotation(getCurrentValueOfInvestment())} con un livello di rischio del ${getAmountInvestmentRisk()}%",
    "investmentGrowth": "Una crescita di ${formatToCashNotation(getGrowthInvestment())} in questo periodo",
    "investmentLoss": "Una perdita di ${formatToCashNotation(Math.abs(getGrowthInvestment()))} in questo periodo",
    "totalInvestmentGrowth": "Una crescita totale di ${formatToCashNotation(getCurrentValueOfInvestment() - getAmountInvestmentCash())}",
    "totalInvestmentLoss": "Una perdita totale di ${formatToCashNotation(Math.abs(getCurrentValueOfInvestment() - getAmountInvestmentCash()))}",
    "clickAgainNewGame": "Clicca di nuovo per iniziare un nuovo gioco...",
    "currentCash": "Denaro attuale: ${currentCash()}",
    "cashInvested": "Denaro investito:",
    "currentRisk": "Rischio attuale:",
    "currentValue": "Valore attuale:",
    "gainLoss": "Guadagno / Perdita:",
    "withdrawAll": "Ritira tutto:",
    "withdrawNow": "Ritira ora!",
    "cannotWithdraw": "Impossibile ritirare",
    "gainedAShiftPoint": "Hai guadagnato un punto turno!",
    "shiftPoints": "I tuoi punti turno totali sono ${getShiftPoints()}",
    "shiftPointsPartial": "I tuoi punti turno totali sono ",
    "noShiftPoints": "Nessun punto turno!",
    "spinWheel": "Gira la ruota",
    "startedFinalShift": "Iniziato l'ultimo turno!",
    "beatTheGame": "Hai battuto il gioco! Ben fatto!",
    "youEarnedATotalOf": "Hai guadagnato un totale di ${formatToCashNotation(getTotalEarnedInSales())} dalle vendite di chip!",
    "youSpentATotalOf": "Hai speso un totale di ${formatToCashNotation(getTotalSpentExcludingInvestments())} escludendo gli investimenti!",
    "youPeeledATotalOf": "Hai sbucciato un totale di ${getTotalPeeled()} patate.",
    "youCutATotalOf": "Hai tagliato un totale di ${getTotalCut()} chips.",
    "youWastedATotalOf": "Hai sprecato un totale di ${getTotalWastedChips()} chips.",
    "youServedATotalOf": "Hai servito un totale di ${getTotalServedCustomers()} clienti!",
    "nowDoTheHonours": "Ora per favore fai l'onore e friggi e servi l'ultimo cliente con le sue patatine prima di ritirarti da milionario!",
    "earnings": "Guadagni: ${formatToCashNotation(getCurrentCash() - getOldCash())} in questo turno + ${formatToCashNotation(getOldCash())} in banca = ${formatToCashNotation(getCurrentCash())}",
    "customersServed": "Clienti serviti: ${getCustomersServed()}<br>",
    "potatoesPeeled": "Patate sbucciate: ${getPotatoesPeeledThisShift()}",
    "chipsCut": "Chips tagliate: ${getChipsCutThisShift()}",
    "chipsFried": "Chips fritte: ${getChipsFriedThisShift()}",
    "chipsWastedThisShift": "Chips sprecate in questo turno: ${getChipsWastedThisShift()}",
    "customerWalkouts": "Clienti che se ne sono andati: ${getCustomersWaitingBeforeEndOfShift() - getCustomersWaiting()}",
    "customersStillWaiting": "Clienti ancora in attesa: ${getCustomersWaiting()}",
    "cappedAutoPeeler": "Limitato: ${getCapAutoPeeler()}/s",
    "cappedAutoChipper": "Limitato: ${getCapAutoChipper()}/s",
    "cappedAutoFryer": "Limitato: ${getCapAutoFryer()}s<br> Pronto in ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "cappedAutoStorageCollector": "Limitato: ${getCapAutoStorageCollector()}s<br> Pronto in ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "cappedAutoCustomerServer": "Limitato: ${getCapAutoCustomerServer()}s<br> Pronto in ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "cappedPotatoCapacity": "Limitato: ${getCapPotatoCapacity()}",
    "cappedFryerCapacity": "Limitato: ${getCapFryerCapacity()}",
    "cappedFryerSpeed": "Limitato: ${getCapFryerSpeed()}s",
    "cappedMaxDelivery": "Limitato: ${getCapMaxDelivery()}",
    "cappedMaxWaitCustomer": "Limitato: ${getCapMaxWaitCustomer()}s",
    "peelPotato": "Sbuccia patata",
    "cutChips": "Taglia chips",
    "fryChips": "Friggi chips<br> (Capacità: ${getFryerCapacity()})",
    "servingStorage": "Servizio di stoccaggio",
    "serveCustomer": "Servi il cliente",
    "autoPeelerUpgradeButton": "Sbucciapatate automatico (${getCurrentSpeedAutoPeeler()})<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(getPriceToImproveAutoPeeler())}<br>Compra per attivare",
    "autoPeelerUpgradeButtonSomeBought": "Sbucciapatate automatico (${getCurrentSpeedAutoPeeler()}/s)<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoPeelerUpgradeButton.id))}",
    "autoChipperUpgradeButton": "Affettatrice automatica (${getCurrentSpeedAutoChipper()})<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(getPriceToImproveAutoChipper())}<br>Compra per attivare",
    "autoChipperUpgradeButtonSomeBought": "Affettatrice automatica (${getCurrentSpeedAutoChipper()}/s)<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoChipperUpgradeButton.id))}",
    "autoFryerUpgradeButton": "Friggitrice automatica (${getCurrentSpeedAutoFryer()})<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(getPriceToImproveAutoFryerWhenFryerEmptyAndChipsCut())}<br>Compra per attivare",
    "autoFryerUpgradeButtonSomeBought": "Friggitrice automatica (${getCurrentSpeedAutoFryer()}/s)<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoFryerUpgradeButton.id))}<br> Pronto in ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "autoStorageCollectorUpgradeButton": "Raccoglitore automatico (${getCurrentSpeedAutoStorageCollector()})<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(getPriceToImproveAutoMoverFromFryerToStorage())}<br>Compra per attivare",
    "autoStorageCollectorUpgradeButtonSomeBought": "Raccoglitore automatico (${getCurrentSpeedAutoStorageCollector()}/s)<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoStorageCollectorUpgradeButton.id))}<br> Pronto in ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "autoCustomerServerUpgradeButton": "Servitore automatico (${getCurrentSpeedAutoCustomerServer()})<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(getPriceToImproveAutoCustomerServer())}<br>Compra per attivare",
    "autoCustomerServerUpgradeButtonSomeBought": "Servitore automatico (${getCurrentSpeedAutoCustomerServer()}/s)<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoCustomerServerUpgradeButton.id))}<br> Pronto in ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "improvePotatoStorageButton": "Aumenta capacità patate<br>${getPotatoStorageQuantity()} → ${getPotatoStorageQuantity() + getUpgradePotatoStorageQuantity()}<br>${formatToCashNotation(getPriceToImprovePotatoStorage())}",
    "improveFryerCapacityButton": "Aumenta capacità friggitrice<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(getPriceToImproveFryerCapacity())}",
    "improveFryerCapacityButtonSomeBought": "Aumenta capacità friggitrice<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().improveFryerCapacityButton.id))}",
    "fastFryerUpgradeButton": "Aumenta velocità friggitrice<br>${getFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(getPriceToImproveFryTimer())}",
    "fastFryerUpgradeButtonSomeBought": "Aumenta velocità friggitrice<br>${getCurrentSpeedFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().fastFryerUpgradeButton.id))}",
    "potatoDeliveryDoublerButton": "Raddoppia consegna massima<br>${getMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(getPriceToDoubleSpudsMax())}",
    "potatoDeliveryDoublerButtonSomeBought": "Raddoppia consegna massima<br>${getCurrentMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().potatoDeliveryDoublerButton.id))}",
    "customerFrequencyIncreaser": "Attendi massimo cliente<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(getPriceToIncreaseFootfall())}",
    "customerFrequencyIncreaserSomeBought": "Attendi massimo cliente<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().customerFrequencyIncreaser.id))}",
    "twoHandedPeelingButton": "Doppio strumento di sbucciatura <br> ${formatToCashNotation(getPriceToEnableDoublePeeling())}",
    "twoHandedChippingButton": "Doppio strumento di taglio <br> ${formatToCashNotation(getPriceToEnableDoubleChipping())}",
    "investmentFundUnlockOrFloatButton": "Acquista fondo d'investimento <br> ${formatToCashNotation(getPriceToUnlockInvestmentFundOrFloatOnStockMarket())}",
    "addStorageHeaterAutoShiftStartButton": "Acquista riscaldatore per stoccaggio <br> ${formatToCashNotation(getPriceToAddStorageHeater())}",
    "startShiftButton": "Inizia turno",
    "doublePeelingToolPurchase": "Acquisto doppio strumento di sbucciatura effettuato",
    "doubleChippingToolPurchase": "Acquisto doppio strumento di taglio effettuato",
    "storageBinHeaterPurchase": "Acquisto riscaldatore per contenitore di stoccaggio effettuato",
    "autoShiftStartUpgrade": "Aggiornamento avvio turno automatico<br>${formatToCashNotation(getPriceToUnlockAutoShiftStart())})",
    "emptyFryerToUseAgain": "Svuota friggitrice<br>Per usare di nuovo!",
    "finalShift": "Turno finale!",
    "serveLastCustomerAndWin": "Servi l'ultimo cliente e vinci il gioco!",
    "potatoStorageFilled": "Contenitore di patate pieno",
    "moneyDoubled": "Denaro raddoppiato",
    "customerWalkout": "Cliente che se ne va",
    "customers": "Clienti",
    "deliveryCancelled": "Consegna cancellata",
    "fineOfHalfMoney": "Multata la metà del denaro",
    "halfOfPotatoesRot": "Metà delle patate marce",
    "fryingChips": "Friggendo ' + getQuantityOfChipsFrying() + ' Chips <br> (' + getFryTimeRemaining() + 's)",
    "newGame": "Nuovo gioco",
    "clickAgainToStartNewGame": "Clicca di nuovo per iniziare un nuovo gioco...",
    "loadGame": "Carica gioco",
    "saveGame": "Salva gioco",
    "help": "Aiuto",
    "resumeGame": "Riprendi gioco",
    "autoSaveOnOff": "AutoSalvataggio On/Off",
    "shiftEnded": "Il tuo turno è finito!",
    "continue": "Continua",
    "changeInvestmentAmount": "Cambia <br>Importo <br>dell'Investimento",
    "changeRiskAmount": "Cambia <br>Importo <br>del Rischio",
    "incrementRisk": "+1% Rischio",
    "decrementRisk": "-1% Rischio"
  },
  "fr": {
    "potatoes": "Pommes",
    "roleOne": "Préparateur de friterie",
    "roleTwo": "Préparateur intelligent",
    "roleThree": "Gérant de friterie",
    "roleFour": "Propriétaire de friterie",
    "roleFive": "Cadre de l'empire de la frite",
    "roleSix": "Directeur riche et paresseux",
    "roleSeven": "Président des pommes de terre",
    "shift": "Shift:",
    "startShift": "Démarrer le shift",
    "served": "Servis:",
    "potato": "Pomme:",
    "money": "Argent:",
    "newGamePrompt": "Cliquez à nouveau pour commencer un nouveau jeu...",
    "floatStockMarket": "Cotation en Bourse<br>${formatToCashNotation(getPriceToFloatOnStockMarket())}",
    "autoShiftUpgradeDisabled": "Mise à niveau de démarrage automatique du shift<br>DÉSACTIVÉE",
    "autoShiftUpgradeEnabled": "Mise à niveau de démarrage automatique du shift<br>ACTIVÉE",
    "congratulations": "Félicitations, vous avez gagné !",
    "endOfShift": "Fin du shift ${getShiftCounter()}",
    "potatoesNextShift": "Pommes de terre pour le prochain shift : ${(getActualPotatoesInStorage() + Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity())) - getActualPotatoesInStorage()} à livrer = ${Math.abs(getActualPotatoesInStorage() - Math.min((getActualPotatoesInStorage() + getSpudsToAddToShift()), getPotatoStorageQuantity()))}",
    "maxStorageReached": " (en raison de l'atteinte du stockage maximum)",
    "promotionMessage": "Vous avez été promu ${getElements().playerRoleText.innerText}!<br><br>",
    "investmentReturns": "Vos investissements de ${formatToCashNotation(getAmountInvestmentCash())} ont rapporté ${formatToCashNotation(getCurrentValueOfInvestment())} avec un niveau de risque de ${getAmountInvestmentRisk()}%",
    "investmentGrowth": "Une croissance de ${formatToCashNotation(getGrowthInvestment())} sur cette période",
    "investmentLoss": "Une perte de ${formatToCashNotation(Math.abs(getGrowthInvestment()))} sur cette période",
    "totalInvestmentGrowth": "Une croissance totale de ${formatToCashNotation(getCurrentValueOfInvestment() - getAmountInvestmentCash())}",
    "totalInvestmentLoss": "Une perte totale de ${formatToCashNotation(Math.abs(getCurrentValueOfInvestment() - getAmountInvestmentCash()))}",
    "clickAgainNewGame": "Cliquez à nouveau pour commencer un nouveau jeu...",
    "currentCash": "Argent actuel : ${currentCash()}",
    "cashInvested": "Argent investi :",
    "currentRisk": "Risque actuel :",
    "currentValue": "Valeur actuelle :",
    "gainLoss": "Gain / Perte :",
    "withdrawAll": "Retirer tout :",
    "withdrawNow": "Retirer maintenant !",
    "cannotWithdraw": "Impossible de retirer",
    "gainedAShiftPoint": "Vous avez gagné un point de shift !",
    "shiftPoints": "Votre total de points de shift est de ${getShiftPoints()}",
    "shiftPointsPartial": "Votre total de points de shift est ",
    "noShiftPoints": "Aucun point de shift !",
    "spinWheel": "Faites tourner la roue",
    "startedFinalShift": "Démarrage du dernier shift !",
    "beatTheGame": "Vous avez battu le jeu ! Bien joué !",
    "youEarnedATotalOf": "Vous avez gagné un total de ${formatToCashNotation(getTotalEarnedInSales())} en ventes de chips !",
    "youSpentATotalOf": "Vous avez dépensé un total de ${formatToCashNotation(getTotalSpentExcludingInvestments())} hors investissements !",
    "youPeeledATotalOf": "Vous avez épluché un total de ${getTotalPeeled()} pommes de terre.",
    "youCutATotalOf": "Vous avez coupé un total de ${getTotalCut()} chips.",
    "youWastedATotalOf": "Vous avez gaspillé un total de ${getTotalWastedChips()} chips.",
    "youServedATotalOf": "Vous avez servi un total de ${getTotalServedCustomers()} clients !",
    "nowDoTheHonours": "Maintenant, veuillez honorer en faisant frire et en servant le dernier client ses chips avant de prendre votre retraite en tant que millionnaire !",
    "earnings": "Gains : ${formatToCashNotation(getCurrentCash() - getOldCash())} ce shift + ${formatToCashNotation(getOldCash())} en banque = ${formatToCashNotation(getCurrentCash())}",
    "customersServed": "Clients servis : ${getCustomersServed()}<br>",
    "potatoesPeeled": "Pommes de terre épluchées : ${getPotatoesPeeledThisShift()}",
    "chipsCut": "Chips coupées : ${getChipsCutThisShift()}",
    "chipsFried": "Chips frites : ${getChipsFriedThisShift()}",
    "chipsWastedThisShift": "Chips gaspillées ce shift : ${getChipsWastedThisShift()}",
    "customerWalkouts": "Clients partis : ${getCustomersWaitingBeforeEndOfShift() - getCustomersWaiting()}",
    "customersStillWaiting": "Clients en attente : ${getCustomersWaiting()}",
    "cappedAutoPeeler": "Plafonné : ${getCapAutoPeeler()}/s",
    "cappedAutoChipper": "Plafonné : ${getCapAutoChipper()}/s",
    "cappedAutoFryer": "Plafonné : ${getCapAutoFryer()}s<br> Prêt dans ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "cappedAutoStorageCollector": "Plafonné : ${getCapAutoStorageCollector()}s<br> Prêt dans ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "cappedAutoCustomerServer": "Plafonné : ${getCapAutoCustomerServer()}s<br> Prêt dans ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "cappedPotatoCapacity": "Plafonné : ${getCapPotatoCapacity()}",
    "cappedFryerCapacity": "Plafonné : ${getCapFryerCapacity()}",
    "cappedFryerSpeed": "Plafonné : ${getCapFryerSpeed()}s",
    "cappedMaxDelivery": "Plafonné : ${getCapMaxDelivery()}",
    "cappedMaxWaitCustomer": "Plafonné : ${getCapMaxWaitCustomer()}s",
    "peelPotato": "Éplucher la pomme de terre",
    "cutChips": "Couper les chips",
    "fryChips": "Frire les chips<br> (Capacité : ${getFryerCapacity()})",
    "servingStorage": "Stockage de service",
    "serveCustomer": "Servir le client",
    "autoPeelerUpgradeButton": "Éplucheur automatique (${getCurrentSpeedAutoPeeler()})<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(getPriceToImproveAutoPeeler())}<br>Acheter pour activer",
    "autoPeelerUpgradeButtonSomeBought": "Éplucheur automatique (${getCurrentSpeedAutoPeeler()}/s)<br>${getCurrentSpeedAutoPeeler()} → ${getNextSpeedAutoPeeler()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoPeelerUpgradeButton.id))}",
    "autoChipperUpgradeButton": "Trancheuse automatique (${getCurrentSpeedAutoChipper()})<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(getPriceToImproveAutoChipper())}<br>Acheter pour activer",
    "autoChipperUpgradeButtonSomeBought": "Trancheuse automatique (${getCurrentSpeedAutoChipper()}/s)<br>${getCurrentSpeedAutoChipper()} → ${getNextSpeedAutoChipper()}/s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoChipperUpgradeButton.id))}",
    "autoFryerUpgradeButton": "Friteuse automatique (${getCurrentSpeedAutoFryer()})<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(getPriceToImproveAutoFryerWhenFryerEmptyAndChipsCut())}<br>Acheter pour activer",
    "autoFryerUpgradeButtonSomeBought": "Friteuse automatique (${getCurrentSpeedAutoFryer()}/s)<br>${getCurrentSpeedAutoFryer()} → ${getNextSpeedAutoFryer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoFryerUpgradeButton.id))}<br> Prêt dans ${Math.floor(getCurrentSpeedAutoFryer())}s",
    "autoStorageCollectorUpgradeButton": "Collecteur automatique (${getCurrentSpeedAutoStorageCollector()})<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(getPriceToImproveAutoMoverFromFryerToStorage())}<br>Acheter pour activer",
    "autoStorageCollectorUpgradeButtonSomeBought": "Collecteur automatique (${getCurrentSpeedAutoStorageCollector()}/s)<br>${getCurrentSpeedAutoStorageCollector()} → ${getNextSpeedAutoStorageCollector()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoStorageCollectorUpgradeButton.id))}<br> Prêt dans ${Math.floor(getCurrentSpeedAutoStorageCollector())}s",
    "autoCustomerServerUpgradeButton": "Serveur automatique (${getCurrentSpeedAutoCustomerServer()})<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(getPriceToImproveAutoCustomerServer())}<br>Acheter pour activer",
    "autoCustomerServerUpgradeButtonSomeBought": "Serveur automatique (${getCurrentSpeedAutoCustomerServer()}/s)<br>${getCurrentSpeedAutoCustomerServer()} → ${getNextSpeedAutoCustomerServer()}s<br> ${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().autoCustomerServerUpgradeButton.id))}<br> Prêt dans ${Math.floor(getCurrentSpeedAutoCustomerServer())}s",
    "improvePotatoStorageButton": "Augmenter la capacité de stockage des pommes de terre<br>${getPotatoStorageQuantity()} → ${getPotatoStorageQuantity() + getUpgradePotatoStorageQuantity()}<br>${formatToCashNotation(getPriceToImprovePotatoStorage())}",
    "improveFryerCapacityButton": "Améliorer la capacité de la friteuse<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(getPriceToImproveFryerCapacity())}",
    "improveFryerCapacityButtonSomeBought": "Améliorer la capacité de la friteuse<br>${getFryerCapacity()} → ${getFryerCapacity() + getUpgradeFryerCapacityAmount()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().improveFryerCapacityButton.id))}",
    "fastFryerUpgradeButton": "Améliorer la vitesse de la friteuse<br>${getFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(getPriceToImproveFryTimer())}",
    "fastFryerUpgradeButtonSomeBought": "Améliorer la vitesse de la friteuse<br>${getCurrentSpeedFryTimer()}s → ${getNextSpeedFryTimer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().fastFryerUpgradeButton.id))}",
    "potatoDeliveryDoublerButton": "Multiplier la livraison maximale de pommes de terre<br>${getMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(getPriceToDoubleSpudsMax())}",
    "potatoDeliveryDoublerButtonSomeBought": "Multiplier la livraison maximale de pommes de terre<br>${getCurrentMaxSpudsDelivery()} → ${getNextMaxSpudsDelivery()}<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().potatoDeliveryDoublerButton.id))}",
    "customerFrequencyIncreaser": "Augmenter la fréquence maximale du client<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(getPriceToIncreaseFootfall())}",
    "customerFrequencyIncreaserSomeBought": "Augmenter la fréquence maximale du client<br>${getCurrentMaxValueWaitForNewCustomer()}s → ${getNextMaxValueWaitForNewCustomer()}s<br>${formatToCashNotation(calculateAndSetNewPriceOfUpgrade(getElements().customerFrequencyIncreaser.id))}",
    "twoHandedPeelingButton": "Double outil d'épluchage <br> ${formatToCashNotation(getPriceToEnableDoublePeeling())}",
    "twoHandedChippingButton": "Double outil de découpe <br> ${formatToCashNotation(getPriceToEnableDoubleChipping())}",
    "investmentFundUnlockOrFloatButton": "Acheter fonds d'investissement <br> ${formatToCashNotation(getPriceToUnlockInvestmentFundOrFloatOnStockMarket())}",
    "addStorageHeaterAutoShiftStartButton": "Acheter chauffe-entrepôt <br> ${formatToCashNotation(getPriceToAddStorageHeater())}",
    "startShiftButton": "Démarrer le shift",
    "doublePeelingToolPurchase": "Achat d'un double outil d'épluchage effectué",
    "doubleChippingToolPurchase": "Achat d'un double outil de découpe effectué",
    "storageBinHeaterPurchase": "Achat de chauffe-bac de stockage effectué",
    "autoShiftStartUpgrade": "Mise à niveau démarrage automatique du shift<br>${formatToCashNotation(getPriceToUnlockAutoShiftStart())})",
    "emptyFryerToUseAgain": "Vider la friteuse<br>Pour réutilisation !",
    "finalShift": "Dernier shift !",
    "serveLastCustomerAndWin": "Servir le dernier client et gagner le jeu !",
    "potatoStorageFilled": "Stockage des pommes de terre rempli",
    "moneyDoubled": "Argent doublé",
    "customerWalkout": "Client qui s'en va",
    "customers": "Clients",
    "deliveryCancelled": "Livraison annulée",
    "fineOfHalfMoney": "Amende de la moitié de l'argent",
    "halfOfPotatoesRot": "La moitié des pommes de terre pourries",
    "fryingChips": "Friture de ' + getQuantityOfChipsFrying() + ' Chips <br> (' + getFryTimeRemaining() + 's)",
    "newGame": "Nouveau jeu",
    "clickAgainToStartNewGame": "Cliquez à nouveau pour commencer un nouveau jeu...",
    "loadGame": "Charger le jeu",
    "saveGame": "Sauvegarder le jeu",
    "help": "Aide",
    "resumeGame": "Reprendre le jeu",
    "autoSaveOnOff": "AutoSauvegarde On/Off",
    "shiftEnded": "Votre quart de travail est terminé!",
    "continue": "Continuer",
    "changeInvestmentAmount": "Changer <br>Montant <br>de l'Investissement",
    "changeRiskAmount": "Changer <br>Montant <br>de Risque",
    "incrementRisk": "+1% Risque",
    "decrementRisk": "-1% Risque"
  },
  "prizes": {
    "en": {
      "roleOne": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+10 Potatoes", "classification": "good" },
        { "name": "+$5", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+5 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ],
      "roleTwo": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+100 Potatoes", "classification": "good" },
        { "name": "+$15", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+10 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ],
      "roleThree": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+200 Potatoes", "classification": "good" },
        { "name": "+$50", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+15 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ],
      "roleFour": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+300 Potatoes", "classification": "good" },
        { "name": "+$100", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+25 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ],
      "roleFive": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+500 Potatoes", "classification": "good" },
        { "name": "+$1000", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+50 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ],
      "roleSix": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+500 Potatoes", "classification": "good" },
        { "name": "+$3000", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+100 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ],
      "roleSeven": [
        { "name": "Potato Storage Filled", "classification": "good" },
        { "name": "+500 Potatoes", "classification": "good" },
        { "name": "+$5000", "classification": "good" },
        { "name": "Money Doubled", "classification": "good" },
        { "name": "+100 Customers", "classification": "good" },
        { "name": "Nothing", "classification": "bad" },
        { "name": "Delivery Cancelled", "classification": "bad" },
        { "name": "Fine of half of money", "classification": "bad" },
        { "name": "Half Of Potatoes Rot", "classification": "bad" },
        { "name": "Customer Walkout", "classification": "bad" }
      ]
    },
    "de": {
      "de": {
        "roleOne": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+10 Kartoffeln", "classification": "gut" },
          { "name": "+5 $", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+5 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ],
        "roleTwo": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+100 Kartoffeln", "classification": "gut" },
          { "name": "+15 $", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+10 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ],
        "roleThree": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+200 Kartoffeln", "classification": "gut" },
          { "name": "+50 $", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+15 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ],
        "roleFour": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+300 Kartoffeln", "classification": "gut" },
          { "name": "+100 $", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+25 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ],
        "roleFive": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+500 Kartoffeln", "classification": "gut" },
          { "name": "+$1000", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+50 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ],
        "roleSix": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+500 Kartoffeln", "classification": "gut" },
          { "name": "+$3000", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+100 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ],
        "roleSeven": [
          { "name": "Kartoffelvorrat gefüllt", "classification": "gut" },
          { "name": "+500 Kartoffeln", "classification": "gut" },
          { "name": "+$5000", "classification": "gut" },
          { "name": "Geld verdoppelt", "classification": "gut" },
          { "name": "+100 Kunden", "classification": "gut" },
          { "name": "Nichts", "classification": "schlecht" },
          { "name": "Lieferung storniert", "classification": "schlecht" },
          { "name": "Geldstrafe von der Hälfte des Geldes", "classification": "schlecht" },
          { "name": "Hälfte der Kartoffeln verfault", "classification": "schlecht" },
          { "name": "Kunde verlässt den Laden", "classification": "schlecht" }
        ]
      }
    },
    "it": {
      "it": {
        "roleOne": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+10 Patate", "classification": "buono" },
          { "name": "+5 $", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+5 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ],
        "roleTwo": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+100 Patate", "classification": "buono" },
          { "name": "+15 $", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+10 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ],
        "roleThree": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+200 Patate", "classification": "buono" },
          { "name": "+50 $", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+15 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ],
        "roleFour": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+300 Patate", "classification": "buono" },
          { "name": "+100 $", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+25 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ],
        "roleFive": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+500 Patate", "classification": "buono" },
          { "name": "+$1000", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+50 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ],
        "roleSix": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+500 Patate", "classification": "buono" },
          { "name": "+$3000", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+100 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ],
        "roleSeven": [
          { "name": "Deposito patate pieno", "classification": "buono" },
          { "name": "+500 Patate", "classification": "buono" },
          { "name": "+$5000", "classification": "buono" },
          { "name": "Soldi raddoppiati", "classification": "buono" },
          { "name": "+100 Clienti", "classification": "buono" },
          { "name": "Niente", "classification": "cattivo" },
          { "name": "Consegna annullata", "classification": "cattivo" },
          { "name": "Multa pari alla metà dei soldi", "classification": "cattivo" },
          { "name": "Metà delle patate marcisce", "classification": "cattivo" },
          { "name": "Cliente se ne va", "classification": "cattivo" }
        ]
      }
    },
    "fr": {
      "fr": {
        "roleOne": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+10 Pommes de terre", "classification": "bon" },
          { "name": "+5 $", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+5 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ],
        "roleTwo": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+100 Pommes de terre", "classification": "bon" },
          { "name": "+15 $", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+10 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ],
        "roleThree": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+200 Pommes de terre", "classification": "bon" },
          { "name": "+50 $", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+15 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ],
        "roleFour": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+300 Pommes de terre", "classification": "bon" },
          { "name": "+100 $", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+25 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ],
        "roleFive": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+500 Pommes de terre", "classification": "bon" },
          { "name": "+$1000", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+50 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ],
        "roleSix": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+500 Pommes de terre", "classification": "bon" },
          { "name": "+$3000", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+100 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ],
        "roleSeven": [
          { "name": "Stockage de pommes de terre plein", "classification": "bon" },
          { "name": "+500 Pommes de terre", "classification": "bon" },
          { "name": "+$5000", "classification": "bon" },
          { "name": "Argent doublé", "classification": "bon" },
          { "name": "+100 Clients", "classification": "bon" },
          { "name": "Rien", "classification": "mauvais" },
          { "name": "Livraison annulée", "classification": "mauvais" },
          { "name": "Amende de la moitié de l'argent", "classification": "mauvais" },
          { "name": "Moitié des pommes de terre pourries", "classification": "mauvais" },
          { "name": "Client part sans acheter", "classification": "mauvais" }
        ]
      }
    },
    "es": {
      "roleOne": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+10 Papas", "classification": "good" },
        { "name": "+$5", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+5 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ],
      "roleTwo": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+100 Papas", "classification": "good" },
        { "name": "+$15", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+10 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ],
      "roleThree": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+200 Papas", "classification": "good" },
        { "name": "+$50", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+15 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ],
      "roleFour": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+300 Papas", "classification": "good" },
        { "name": "+$100", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+25 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ],
      "roleFive": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+500 Papas", "classification": "good" },
        { "name": "+$1000", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+50 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ],
      "roleSix": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+500 Papas", "classification": "good" },
        { "name": "+$3000", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+100 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ],
      "roleSeven": [
        { "name": "Almacenamiento Lleno", "classification": "good" },
        { "name": "+500 Papas", "classification": "good" },
        { "name": "+$5000", "classification": "good" },
        { "name": "Dinero Doblado", "classification": "good" },
        { "name": "+100 Clientes", "classification": "good" },
        { "name": "Nada", "classification": "bad" },
        { "name": "Entrega Cancelada", "classification": "bad" },
        { "name": "Multa de 50% del dinero", "classification": "bad" },
        { "name": "50% Papas Se Pudren", "classification": "bad" },
        { "name": "Cliente Se Va", "classification": "bad" }
      ]
    }
  }
}